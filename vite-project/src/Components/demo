import axios from "axios";
import React, { useEffect, useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

function Orders() {
  const [books, setBooks] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [minPrice, setMinPrice] = useState(null);
  const [maxPrice, setMaxPrice] = useState(null);
  const [sort, setSort] = useState("");

  useEffect(() => {
    axios
      .get(
        "https://www.googleapis.com/books/v1/volumes?q=harry+potter&maxResults=5"
      )
      .then((response) => {
        setBooks(response.data.items);
        console.log(response.data.items, "books");
      })
      .catch((error) => {
        console.log(error);
      });
  }, []);

  const filteredBooks = books.filter((book) =>
    book.volumeInfo.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredByDate =
    startDate && endDate
      ? filteredBooks.filter((book) => {
          const date = new Date(book.volumeInfo.publishedDate);
          return date >= startDate && date <= endDate;
        })
      : filteredBooks;

  const filteredByPrice =
    minPrice && maxPrice
      ? filteredByDate.filter(
          (book) =>
            book.volumeInfo.ratingsCount >= minPrice &&
            book.volumeInfo.ratingsCount <= maxPrice
        )
      : filteredByDate;

  const sortedBooks = sort
    ? [...filteredByPrice].sort((a, b) => {
        if (sort === "priceLowToHigh") {
          return a.volumeInfo.ratingsCount - b.volumeInfo.ratingsCount;
        } else if (sort === "priceHighToLow") {
          return b.volumeInfo.ratingsCount - a.volumeInfo.ratingsCount;
        } else if (sort === "dateOldToNew") {
          return (
            new Date(a.volumeInfo.publishedDate) -
            new Date(b.volumeInfo.publishedDate)
          );
        } else if (sort === "dateNewToOld") {
          return (
            new Date(b.volumeInfo.publishedDate) -
            new Date(a.volumeInfo.publishedDate)
          );
        }
      })
    : filteredByPrice;
  return (
    <>
      <div className="pl-10 pr-10 mt-10 flex flex-col xl:flex-row justify-center items-stretch w-full xl:space-x-8 space-y-4 md:space-y-6 xl:space-y-0">
        <div className="flex flex-col justify-start items-start w-full space-y-4 md:space-y-6 xl:space-y-8">
          <div className="flex justify-end items-center w-full">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search"
              className="mt-14 px-2 py-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
      </div>
      <div className="flex justify-start items-center w-full">
        <div className="flex justify-center items-center w-64 md:w-72 lg:w-80 space-x-4 md:space-x-6">
          <div className="flex flex-col justify-center items-start w-full">
            <label className="block font-medium text-base mb-2 text-gray-700">
              Purchase Date Range
            </label>
            <DatePicker
              selected={startDate}
              onChange={(date) => setStartDate(date)}
              endDate={endDate}
              minDate={new Date("2000-01-01")}
              maxDate={new Date()}
              className="mt-2 px-2 py-1 border border-gray-300 rounded-md"
              placeholderText="From"
            />
            <DatePicker
              selected={endDate}
              onChange={(date) => setEndDate(date)}
              startDate={startDate}
              minDate={startDate || new Date("2000-01-01")}
              maxDate={new Date()}
              className="mt-2 px-2 py-1 border border-gray-300 rounded-md"
              placeholderText="To"
            />
          </div>
          <div className="flex flex-col justify-center items-start w-full">
            <label className="block font-medium text-base mb-2 text-gray-700">
              Price Range
            </label>
            <input
              type="number"
              value={minPrice}
              onChange={(e) => setMinPrice(e.target.value)}
              placeholder="Min Price"
              className="mt-2 px-2 py-1 border border-gray-300 rounded-md w-36"
            />
            <input
              type="number"
              value={maxPrice}
              onChange={(e) => setMaxPrice(e.target.value)}
              placeholder="Max Price"
              className="mt-2 ml-2 px-2 py-1 border border-gray-300 rounded-md w-36"
            />
          </div>
        </div>
      </div>
      <div className="pl-10 pr-10 mt-10">
        <label className="block font-medium text-base mb-2 text-gray-700">
          Sort By
        </label>
        <select
          value={sort}
          onChange={(e) => setSort(e.target.value)}
          className="px-2 py-1 border border-gray-300 rounded-md"
        >
          <option value="">Select an option</option>
          <option value="priceLowToHigh">Price: Low to High</option>
          <option value="priceHighToLow">Price: High to Low</option>
          <option value="dateOldToNew">Date: Old to New</option>
          <option value="dateNewToOld">Date: New to Old</option>
        </select>
      </div>
      <div className="pl-10 pr-10 mt-10 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {sortedBooks.map((book) => (
          <div key={book.id} className="bg-white shadow-md rounded-md p-4">
            <div className="h-48">
              <img
                src={book.volumeInfo.imageLinks?.thumbnail}
                alt={book.volumeInfo.title}
                className="object-contain h-full w-full"
              />
            </div>
            <div className="mt-2">
              <h3 className="text-lg font-medium text-gray-800">
                {book.volumeInfo.title}
              </h3>
              <p className="text-sm text-gray-500">
                by{" "}
                {book.volumeInfo.authors
                  ? book.volumeInfo.authors.join(", ")
                  : "Unknown"}
              </p>
              <p className="text-sm text-gray-500">
                {book.volumeInfo.publishedDate}
              </p>
              <p className="text-sm font-medium text-gray-700 mt-2">
                ${book.volumeInfo.ratingsCount}
              </p>
            </div>
          </div>
        ))}
      </div>
    </>
  );
}

export default Orders;
